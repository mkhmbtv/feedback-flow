// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  sites         Site[]
  feedback      Feedback[]

  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Site {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  authorId    String
  name        String
  url         String
  timestamps  Boolean    @default(true)
  socialLogos Boolean    @default(true)
  ratings     Boolean    @default(false)
  author      User       @relation(fields: [authorId], references: [id])
  feedback    Feedback[]

  @@index([authorId])
}

enum FeedbackStatus {
  PENDING
  APPROVED
  REMOVED
}

model Feedback {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  authorId  String
  siteId    String
  text      String
  route     String
  provider  String
  rating    String?
  status    FeedbackStatus @default(PENDING)
  author    User           @relation(fields: [authorId], references: [id])
  site      Site           @relation(fields: [siteId], references: [id])

  @@index([authorId])
  @@index([siteId])
  @@index([siteId, route])
}
